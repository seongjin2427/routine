// ! 시간 초과
// ❌
// * 1541. 잃어버린 괄호
// * 그리디

// 1 <= 숫자의 자리 수 <= 5
// 식의 길이 <= 50
// 덧셈과 뺄셈만 존재한다.

// 주어진 식에서 괄호를 적절히 쳐서 이 식에서 만들 수 있는 값 중 최소의 값을 반환

// 숫자화 부호들을 기준으로 어떤 값들을 먼저 연산해야 최소의 값을 도출할 수 있는가
// ? 값을 최대한 크게 만들어서 마이너스를 붙이면?

// 1. 덧셈만 있다면 그냥 모든 값을 다 더하면 된다.
// 2. -가 나올때까지 나오는 숫자들을 모두 다 더해놓는다.
// 3. -가 나오면
// 3-1. 다음 -가 나오거나
// 3-2. 식이 끝날 때까지
//      모든 값을 다 더한다.
// 4. 이전의 값과 다 더한 값을 뺀다.

// 1. 반복문을 실행하여 한 글자씩 확인한다.
// 2. -나 +가 나올때까지 임시 변수1(temp1) 에 값을 할당
// 3-1. -부호가 나온다면 임시 변수2(temp2)에 그 다음 숫자를 할당한다.
//      그 다음 부호로 -가 나올때까지 temp2에 계속 숫자를 더한다.
// 3-2. +부호가 나온다면 임시 변수1(temp1)에 그 다음 숫자를 더한다.

export default function solution(input: string) {
  const parts = input.split("-");

  // 첫 번째 부분을 '+'로 분할하여 합산
  let sum = parts[0].split("+").reduce((acc, num) => acc + parseInt(num), 0);

  // 나머지 부분 처리
  for (let i = 1; i < parts.length; i++) {
    // 각 부분을 '+'로 분할하여 각 숫자를 빼줌
    sum -= parts[i].split("+").reduce((acc, num) => acc + parseInt(num), 0);
  }

  return sum;
}

-(1 + 2 + 3) - 1;
